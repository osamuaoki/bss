#!/bin/sh -e
# vim:se sw=2 ts=2 sts=2 et ai tw=78:
#
# This script creates a filesystem image file and use it to test bss commands
# This is used for debugging bss
#
# common shell code
PROG_NAME="${0##*/}"
USRBIN="$(realpath "${0%/*}/.")" # /usr/bin
. "${USRBIN%/*}/share/bss/common.sh"
. "${USRBIN%/*}/share/bss/log.sh"
### VARIABLES ###
SIZE_DISK="500M"
DISK_IMAGE="disk.img"
MNT_PATH="${USRBIN}"/mnt
# in bin/
mkdir -p $MNT_PATH
BSS_LOGGER=0
BSS_LOGGER_LEVEL="2"
### FUNCTIONS ###
__help () {
cat << END_OF_HELP
Usage: ${PROG_NAME}

'$PROG_NAME' helps to create disk image and test bss command

Copyright 2023 Osamu Aoki <osamu@debian.org>, GPL 2+
END_OF_HELP
}
__version () {
cat << EOM
$PROG_NAME ($PROG_VERSION)

Copyright (C) 2023 Osamu Aoki <osamu@debian.org>

License GPLv2+: GNU GPL version 2 or later
<https://gnu.org/licenses/gpl-2.0.html>.  This is free software: you are free
to change and redistribute it.  There is NO WARRANTY, to the extent permitted
by law.

Written by Osamu Aoki.
EOM
}

setup () {
  if [ -e "$DISK_IMAGE" ]; then
    __echo 0 "existing disk image: $DISK_IMAGE"
    exit 1
  fi
  __echo 2 "create $SIZE_DISK image: $DISK_IMAGE"
  fallocate -l "$SIZE_DISK" "$DISK_IMAGE"
  mkfs.btrfs -L "test_btrfs" "$DISK_IMAGE"
  __echo 2 "make mount path"
  mkdir -p "$MNT_PATH"
  __echo 2 "mount $DISK_IMAGE on $MNT_PATH"
  sudo mount "$DISK_IMAGE" "$MNT_PATH"
  bss template "$MNT_PATH" no_filter
  sync
}

snap () {
  sudo chmod 777 "$MNT_PATH"
  echo "foo" >"$MNT_PATH"/foo
  echo "===== SNAP     ============================================="
  faketime "2020-01-01T00:00:00+00:00" bss s "$MNT_PATH"
  faketime "2020-01-02T00:00:00+00:00" bss s "$MNT_PATH"
  faketime "2020-01-03T00:00:00+00:00" bss s "$MNT_PATH"
  echo "bar" >"$MNT_PATH"/bar
  faketime "2021-01-01T00:00:00+00:00" bss s "$MNT_PATH"
  faketime "2021-01-02T00:00:00+00:00" bss s "$MNT_PATH"
  faketime "2021-01-03T00:00:00+00:00" bss s "$MNT_PATH"
  faketime "2021-01-04T00:00:00+00:00" bss s "$MNT_PATH"
  faketime "2021-02-01T00:00:00+00:00" bss s "$MNT_PATH"
  faketime "2021-03-01T00:00:00+00:00" bss s "$MNT_PATH"
  faketime "2021-12-01T00:00:00+00:00" bss s "$MNT_PATH"
  faketime "2022-01-01T00:00:00+00:00" bss s "$MNT_PATH"
  faketime "2023-01-01T00:00:00+00:00" bss s "$MNT_PATH"
  faketime "2023-02-01T00:00:00+00:00" bss s "$MNT_PATH"
  faketime "2023-03-01T00:00:00+00:00" bss s "$MNT_PATH"
  faketime "2023-04-01T00:00:00+00:00" bss s "$MNT_PATH"
  faketime "2023-04-01T00:00:01+00:00" bss s "$MNT_PATH"
  faketime "2023-04-01T00:00:02+00:00" bss s "$MNT_PATH"
  faketime "2023-04-01T00:00:03+00:00" bss s "$MNT_PATH"
  faketime "2023-04-01T00:00:04+00:00" bss s "$MNT_PATH"
  faketime "2023-04-01T00:00:05+00:00" bss s "$MNT_PATH"
  faketime "2023-04-01T00:00:06+00:00" bss s "$MNT_PATH"
  faketime "2023-04-01T00:00:07+00:00" bss s "$MNT_PATH"
  faketime "2023-04-01T00:00:08+00:00" bss s "$MNT_PATH"
  faketime "2023-04-01T00:00:09+00:00" bss s "$MNT_PATH"
}

process () {
  echo "===== LIST     ============================================="
  faketime "2023-04-02T00:00:10+00:00" bss l "$MNT_PATH"
  echo "===== OVERVIEW ============================================="
  faketime "2023-04-02T00:00:10+00:00" bss o "$MNT_PATH"
  echo "===== AGE      ============================================="
  faketime "2023-04-02T00:00:10+00:00" bss a "$MNT_PATH"
  echo "===== PROCESS  ============================================="
  faketime "2023-04-02T00:00:10+00:00" bss p "$MNT_PATH"
  echo "===== LIST     ============================================="
  faketime "2023-04-02T00:00:10+00:00" bss l "$MNT_PATH"
}

clean () {
  sync
  echo "===== DELETE ALL ==========================================="
  #faketime "2023-04-02T00:00:10+00:00" bss zap "$MNT_PATH" .bss.d/*T*00:00.*
  faketime "2023-04-02T00:00:10+00:00" bss zap "$MNT_PATH" $MNT_PATH/.bss.d/*+00:00.*
  echo "===== LIST       ==========================================="
  faketime "2023-04-02T00:00:10+00:00" bss l "$MNT_PATH"
  echo "===== UMOUNT     ==========================================="
  __echo 2 "umount disk image at: $MNT_PATH ..."
  # use umount w/o -l to be on safe side.
  if sudo umount "$MNT_PATH" ; then
    __echo 2 "umount disk image at: $MNT_PATH done"
  else
    __echo 2 "umount disk image at: $MNT_PATH with error"
  fi
  rm -f $DISK_IMAGE
  __echo 2 "remove disk image"
  rm -rf "$MNT_PATH"
  __echo 2 "remove mount path"
}


##############################################################################
### MAIN ###
##############################################################################
# Parse Command Line
##############################################################################
while [ -n "$1" ] ; do
  case "$1" in
    a*)
      setup
      snap
      process
      clean
      ;;
    se*)
      setup
      ;;
    sn*)
      snap
      ;;
    pr*)
      process
      ;;
    cl*)
      clean
      ;;
    *)
      echo "ERROR: '$1' unknown"
      exit 1
  esac
  shift
done
exit $EXIT_SUCCESS
#########################################################################################################################
