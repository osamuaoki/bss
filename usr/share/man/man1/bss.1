.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.49.3.
.TH BSS "1" "May 2023" "bss  (1.3.5)" "User Commands"
.SH NAME
bss \- btrfs subvolume snapshot utility  (1.3.5)
.SH SYNOPSIS
.B bss
[\fI\,OPTIONS\/\fR] \fI\,SUBCOMMAND \/\fR[\fI\,PATH \/\fR[ [\fI\,ARG\/\fR]...]
.SH DESCRIPTION
"bss" is basically a "btrfs subvolume ..." command wrapper to create and
process historical snapshots with the intuitive snapshot subvolume name and
flexible data aging capabilities.  (Some subcommands can work with ext2/3/4fs,
too.)
.PP
"bss" operates on the btrfs subvolume pointed by the first optional argument
PATH.  PATH can point to anywhere within this source btrfs subvolume.  The
default value for PATH is the current directory (".").  The internal variable
"$FS_BASE" is the BASE directory of this source btrfs subvolume.
.PP
"bss snapshot [PATH]" starts "snapshot" operation to create a btrfs readonly
snapshot of the source btrfs subvolume using "btrfs subvolume snapshot \fB\-r\fR ...".
The snapshot subvolume is named with ISO 8601 timestamp and TYPE specifier,
e.g.  '2020\-09\-02T11:51:50+00:00.single' and placed normally in the ".bss.d/"
directory relative to the BASE directory.  This normal mode is intended to be
used for the user data.
.PP
"bss snapshot [PATH]" can place its snapshots under the "BSS_SNAP_DEST"
directory specified in ".bss.conf".  Normally, it is set to the null string to
indicate "bss" to use the normal mode.  This "BSS_SNAP_DEST" directory must be
on the same btrfs but it can be outside of the snapshot source subvolume.  This
system mode is intended to be used for the root filesystem.
.PP
"bss process [PATH]" starts "process" operation to process existing snapshots
generated by "bss" according to their age.  "bss" checks the time interval
between them from the older ones to newer ones and makes them more sparse for
the older ones by removing some of them using parameters in ".bss.conf" in the
".bss.d/" directory.  This involves following actions:
.IP
* Secure minimum required free blocks (minimum FMIN %).
.IP
* Keep initial few (NMIN) snapshots unconditionally.
.IP
* Limit the maximum number of snapshots to NMAX.
.IP
* NMAX=0 is the special case and means no limit for number of snapshots.
.IP
* Before TMIN, keep snapshots unconditionally.
.IP
* Age snapshots with basically exponentially growing intervals with the
specified ratio (STEP 2%\-90%).
.IP
* After TMID, age snapshots more aggressively.
.IP
* Special handlings to keep some high priority snapshots stop.
.IP
* If TMID_ACTION=filter, content files of snapshots are filtered with the
.IP
script ".bss.fltr" at the ".bss.d/" directory.
.IP
* After TMAX, stop aging snapshots.
.IP
* TMAX=0 is the special case and means no limit for aging.
.IP
* If TMAX_ACTION=drop, drop subvolume after TMAX.
.IP
* If TMAX_ACTION=keep, keep subvolume after TMAX.
.PP
.SH OPTIONS
.TP
\fB\-t\fR,\-\-type TYPE
use TYPE instead of the default "single" for the snapshot
type.  The automatic snapshot uses "pre" (before APT), "post"
(after APT), "hour" (on boot and every hour).
If "keep" is specified, the snapshot with it will be
kept forever under the normal aging process.
.TP
\fB\-c\fR,\-\-conf RC
use "RC.conf", "RC.fltr" etc. instead of their
default ".bss.conf", ".bss.fltr" etc.
.TP
\fB\-f\fR,\-\-force
force to reapply filter
.TP
\fB\-n\fR,\-\-noop
no file nor filesystem modification by prepending pertinent
internal commands with "echo __"
.TP
\fB\-h\fR,\-\-help
show this help
.TP
\fB\-\-version\fR
show version
.TP
\fB\-l\fR,\-\-logger
use systemd logger
.TP
\fB\-m\fR,\-\-may
may execute snapshot or gather if possible
.TP
\fB\-q\fR,\-\-quiet
quiet (no notice messages, just warn/error messages)
.TP
\fB\-v\fR,\-\-verbose
verbose (with info messages)
.TP
\fB\-vv\fR
very verbose for debug (with info and debug messages)
.TP
\fB\-x\fR
trace on (trace shell code for debug)
.PP
.SH SUBCOMMAND
.TP
snapshot
make a readonly snapshot normally in the relative path ".bss.d/"
as <ISO_8601_date>.<TYPE>  (The default type is "single")
.TP
overview
overview of all snapshots (wrapper for age)
.TP
process
process snapshots according to their aging status
.TP
copy
copy subvolume at the BASE directory (1st argument) to the (remote)
destination (2nd argument) using rsync
.TP
jobs
list all systemd timer schedule jobs for bss
.TP
list
list all snapshots
.TP
age
assess aging status of all snapshots
.TP
gather
gather files to "gather_root" and "gather_home" based on ".gatherrc"
.TP
filter
create a filtered snapshot from the specified snapshot in
".bss.d/" as <specified_subvol_name>_filter
.TP
revert
make snapshot <ISO_8601_date>.last and replace the subvolume at the
BASE directory (1st argument) with the specified snapshot
<ISO_8601_date>.<extension> (2nd argument) found under
"BSS_SNAP_DEST" specified in ".bss.conf".  This is only for the
system mode. (This is alpha stage untested feature.)
.TP
zap
zap (=delete) particular snapshot(s) specified by the arguments
"zap" is required to be typed in full text.
.TP
template
make template files in the ".bss.d/" directory:
.IP
".bss.conf" (aging rule)
.IP
".bss.fltr" (filtering rule)
.TP
BASE
print the BASE directory for "bss"
.PP
Subcommands may be shortened to a single character.
.PP
.SH ARGUMENTS
.PP
For some SUBCOMMANDs, enxtra optional arguments after the explicit PATH may
be specified.
.PP
For "bss copy", this is a combination of "bss snapshot" to create a snapshot
of the BASE directory to SOURCE_PATH and a wrapper for "sudo rsync" command with
its first argument SOURCE_PATH and the second argument DEST_PATH.  This command
is smart enough to skip the ".bss.d/" directory to allow independent
management of data using "bss" on both the BASE directory and DEST_PATH.
.PP
For "bss list", you may add the second argument to match snapshot <TYPE>.
"bss list . 's.*'" should list snapshots with "single".
.PP
If DEST_PATH is a local path such as "/srv/backup", then
.IP
"sudo rsync \fB\-aHxS\fR \fB\-\-delete\fR \fB\-\-mkpath\fR"
.PP
is used to have enough privilege and to save the CPU load.
.PP
If DEST_PATH is a remote path such as "[USER@]HOST:DEST_PATH", then
.IP
"rsync \fB\-aHxSz\fR \fB\-\-delete\fR \fB\-\-mkpath\fR"
.PP
is used to limit privilege and save the network load. Also, this allows
"bss copy" to use the SSH\-key stored under "~/.ssh/".
.PP
For "bss zap", the first argument is normally ".".  The following argument
specifies the action which can be:
.TP
* new
zap (=delete) the newest snapshot subvolume
.TP
* old
zap the oldest snapshot subvolume
.TP
* half
zap the older half of snapshot subvolumes
.TP
* <subvolume>
zap specified snapshot subvolume (path with or without
".bss.d/" such as "2020\-01\-01T00:00:00+00:00.single").
Multiple subvolumes may be specified.
.PP
Unless you have specific reasons to use "bss zap", you should consider to use
"bss process" to prune outdated snapshots.
.PP
For "bss revert PATH PATH_OLD", subvolume at PATH is replaced by the subvolume
at PATH_OLD.  PATH can't be set to "/".
.PP
For "bss gather [PATH [PREFIX]]", files listed in ".PREFIXrc" are copied into
PREFIX_root and PREFIX_home.  The relative path are interpreted as one from the
user's home directory. The default for PREFIX is "gather".
.PP
.SH NOTE
.PP
This "bss" command comes with examples for systemd scripts and apt hook script
to enable automatic "snapshot" operations.  This "bss" command also comes with
examples for systemd scripts to enable automatic daily "process" operation.
.PP
For some snapshots, different TYPE values may be used instead of TYPE='single'.
.TP
* TYPE='pre'
automatic "snapshot" operation just before APT update
.TP
* TYPE='post'
automatic "snapshot" operation just after  APT update
.TP
* TYPE='copy'
automatic "snapshot" operation just before "bss copy"
.TP
* TYPE='hour'
automatic "snapshot" operation on boot and every hour
.TP
* TYPE='last'
automatic "snapshot" operation just before "bss revert"
.PP
This "bss" calculates age related time values in the second and prints them in
the DAYS.HH:MM:SS format (HH=hour, MM=minute, SS=second).
.PP
You can make a snapshot just by "bss" alone.
.PP
You can use verbose "bss \fB\-v\fR BASE" command to print current effective
configuration parameters without side effects.
.PP
This "bss" command uses systemd journal.  You can check recent invocation with:
.IP
\f(CW$ journalctl -a -b -t bss\fR
.PP
.SH CAVEAT
.PP
The source filesystem must be btrfs for many subcommands.
.PP
The non\-root user who executes this command must be a member of "sudo".
.PP
Running filter script ".bss.fltr" drains CPU and SSD resources but it may save
SSD usage size significantly.  If you are not interested in reducing SSD usage
size by this script, remove this ".bss.fltr" file and set
BSS_TMID_ACTION="no_filter" in ".bss.conf".
.PP
The "revert" operation is supported only for the system mode.  APT updates can
be used to create snapshots of the system.  The "revert" operation can bring
the system before the APT update operation.  The "revert" operation  must be
performed from the secondary system on another root filesystem and all
subvolumes to be manipulated shouldn't be accessed by other processes. You
should manually mount using "/etc/fstab" for all subvolumes under the subvolume
to run "revert" operation and manage them separately to keep the system
recoverable since the snapshot operation isn't recursive.
.PP
Although this "bss" focuses on btrfs, there is minimal support for ext2/ext3
(this includes ext4) for "bss copy ...", "bss gather ...", and "bss
template".
.SH AUTHOR
Written by Osamu Aoki.
.SH COPYRIGHT
Copyright \(co 2021\-2022 Osamu Aoki <osamu@debian.org>
.PP
License GPLv2+: GNU GPL version 2 or later <https://gnu.org/licenses/gpl\-2.0.html>.
.PP
This is free software: you are free to change and redistribute it.  There is NO
WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
See <https://github.com/osamuaoki/bss> for the latest information.
