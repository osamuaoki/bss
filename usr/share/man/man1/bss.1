.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.49.2.
.TH BSS "1" "August 2022" "bss (1.1.0)" "User Commands"
.SH NAME
bss \- btrfs subvolume snapshot utility (1.1.0)
.SH SYNOPSIS
.B bss
[\fI\,OPTIONS\/\fR] \fI\,SUBCOMMAND \/\fR[\fI\,PATH \/\fR[[\fI\,ARG\/\fR]...]
.SH DESCRIPTION
"bss" is basically a "btrfs subvolume ..." command wrapper to create and
process historical snapshots with the intuitive snapshot subvolume name and
flexible data aging capabilities.
.PP
"bss" operates on the btrfs subvolume pointed by the first optional argument
PATH.  PATH can point to anywhere within this source btrfs subvolume.  The
default value for PATH is the current directory (".").  The internal variable
"$BTRFS_BASE" is the BASE directory of this source btrfs subvolume.
.PP
"bss snapshot [PATH]" starts "snapshot" operation to create a btrfs readonly
snapshot of the source btrfs subvolume using "btrfs subvolume snapshot \fB\-r\fR ...".
The snapshot subvolume is named with ISO 8601 timestamp and TYPE specifier,
e.g.  '2020\-09\-02T11:51:50+00:00.single' and placed normally in the ".bss.d/"
directory relative to the BASE directory.  This normal mode is intended to be
used for the user data.
.PP
"bss snapshot [PATH]" can place its snapshots under the "BSS_SNAP_DEST"
directory specified in ".bss.conf".  This "BSS_SNAP_DEST" directory must be on
the same btrfs but it can be outside of the snapshot subvolume.  This system
mode is intended to be used for the root filesystem.
.PP
"bss process [PATH]" starts "process" operation to process existing snapshots
generated by "bss" according to their age.  "bss" checks the time interval
between them from the older ones to newer ones and makes them more sparse for
the older ones by removing some of them using parameters in ".bss.conf" in the
".bss.d/" directory.  This involves following actions:
.IP "\(bu" 4
Secure minimum required free blocks (minimum FMIN %).
.IP "\(bu" 4
Keep initial few (NMIN) snapshots unconditionally.
.IP "\(bu" 4
Limit the maximum number of snapshots to NMAX.
.RS
.IP "\(bu" 4
NMAX=0 is the special case and means no limit for number of snapshots.
.RE
.IP "\(bu" 4
Before TMIN, keep snapshots unconditionally.
.IP "\(bu" 4
Age snapshots with basically exponentially growing intervals with the
specified ratio (STEP 2%\-90%).
.IP "\(bu" 4
After TMID, age snapshots more aggressively.
.RS
.IP "\(bu" 4
Special handlings to keep some high priority snapshots stop.
.IP "\(bu" 4
If TMID_ACTION=filter, content files of snapshots are filtered with the
script ".bss.fltr" at the ".bss.d/" directory.
.RE
.IP "\(bu" 4
After TMAX, stop aging snapshots.
.RS
.IP "\(bu" 4
TMAX=0 is the special case and means no limit for aging.
.IP "\(bu" 4
If TMAX_ACTION=drop, drop subvolume after TMAX.
.IP "\(bu" 4
If TMAX_ACTION=keep, keep subvolume after TMAX.
.RE
.PP
.SH OPTIONS
.TP
\fB\-t\fR,\-\-type TYPE
use TYPE instead of the default "single" for the snapshot
type.  The automatic snapshot uses "pre" (before APT), "post"
(after APT), "hour" (on boot and every hour).
If "keep" is specified, the snapshot with it will be
kept forever under the normal aging process.
.TP
\fB\-c\fR,\-\-conf RC
use "RC.conf" and "RC.fltr" instead of their
default ".bss.conf" and ".bss.fltr"
.TP
\fB\-f\fR,\-\-force
force to reapply filter
.TP
\fB\-n\fR,\-\-noop
no file nor filesystem modification by prepending pertinent
internal commands with "echo __"
.TP
\fB\-h\fR,\-\-help
show this help
.TP
\fB\-\-version\fR
show version
.TP
\fB\-l\fR,\-\-logger
use systemd logger
.TP
\fB\-q\fR,\-\-quiet
quiet (no notice messages, just warn/error messages)
.TP
\fB\-v\fR,\-\-verbose
verbose (with info messages)
.TP
\fB\-vv\fR
very verbose for debug (with info and debug messages)
.TP
\fB\-x\fR
trace on (trace shell code for debug)
.PP
.SH SUBCOMMAND
.TP
snapshot
make a readonly snapshot normally in the relative path ".bss.d/"
as <ISO_8601_date>.<TYPE>
(The default type is "single")
.TP
overview
overview of all snapshots (wrapper for age)
.TP
process
process snapshots according to their aging status
.TP
copy
copy to (remote) destination using rsync
.TP
jobs
list all systemd timer schedule jobs for bss
.TP
list
list all snapshots
.TP
age
assess aging status of all snapshots
.TP
base
print the BASE directory for "bss"
.TP
filter
create a filtered snapshot from the specified snapshot in
".bss.d/" as <specified_subvol_name>_filter
.TP
revert
revert makes snapshot <ISO_8601_date>.last and replace contents of
the BASE directory with the specified snapshot
<ISO_8601_date>.<extension> found under "BSS_SNAP_DEST" specified
in ".bss.conf".  This is only for the system mode.
(This is alpha stage untested feature.)
.TP
zap:
zap (=delete) particular snapshot(s) specified by ARG(s)
"zap" is required to be typed in full text.
.TP
template
make template files in the ".bss.d/" directory:
.RS
.IP "\(bu" 4
".bss.conf" (aging rule)
.IP "\(bu" 4
".bss.fltr" (filtering rule)
.RE
.PP
Subcommands may be shortened to a single character.
.PP
.SH ARGUMENTS
.PP
For some SUBCOMMANDs, an enxtra optional argument after the explicit PATH may
be specified to identify the specific snapshot subvolume.
.PP
For "bss copy", this is a combination of "bss snapshot" to create a snapshot
of BTRFS_BASE to SOURCE_PATH and a wrapper for "rsync" command with its first
argument SOURCE_PATH and the second argument DESTINATION_PATH.  This command is
smart enough to skip the ".bss.d/" directory to allow independent management
of data using "bss" on both BTRFS_BASE and DESTINATION_PATH. If
DESTINATION_PATH is a local path such as \fI\,/srv/backup\/\fP, then "rsync \fB\-aHxSv\fR \fB\-\-delete\fR"
is used to save the CPU load.  If DESTINATION_PATH is a remote path such as
"[USER@]HOST:DESTINATION_PATH", then "rsync \fB\-aHxSzv\fR \fB\-\-delete\fR" is used to save the
network load.
.PP
For "bss zap", the first argument is normally ".".  The following argument
specifies the action which can be:
.IP "\(bu" 4
new: zap (=delete) the newest snapshot subvolume
.IP "\(bu" 4
old: zap the oldest snapshot subvolume
.IP "\(bu" 4
half: zap the older half of snapshot subvolumes
.IP "\(bu" 4
<subvolume>???: zap specified snapshot subvolume(s) (path without ".bss.d/")
.PP
Unless you have specific reasons to use "bss zap", you should consider to use
"bss process" to prune outdated snapshots.
.PP
.SH NOTE
.PP
This "bss" command comes with examples for systemd scripts and apt hook script
to enable automatic "snapshot" operations.  This "bss" command also comes with
examples for systemd scripts to enable automatic daily "process" operation.
.PP
For some snapshots, different TYPE values may be used instead of TYPE='single'.
.IP "\(bu" 4
TYPE='pre': automatic "snapshot" operation just before APT update
.IP "\(bu" 4
TYPE='post': automatic "snapshot" operation just after APT update
.IP "\(bu" 4
TYPE='copy': automatic "snapshot" operation just before "bss copy"
.IP "\(bu" 4
TYPE='hour': automatic "snapshot" operation on boot and every hour
.IP "\(bu" 4
TYPE='last': automatic "snapshot" operation just before "bss revert"
.IP "\(bu" 4
TYPE='???_revert': automatic "snapshot" operation just after "bss revert"
.PP
This "bss" calculates age related time values in the second and prints them in
the DAYS.HH:MM:SS format (HH=hour, MM=minute, SS=second).
.PP
You can make a snapshot just by "bss" alone.
.PP
You can use verbose "bss \fB\-v\fR base" command to print current effective
configuration parameters without side effects.
.PP
This "bss" command uses systemd journal.  You can check recent invocation with:
.IP
\f(CW$ journalctl -a -b -t bss\fR
.PP
.SH CAVEAT
.PP
The source filesystem must be btrfs.
.PP
The non\-root user who executes this command must be a member of "sudo".
PATH in "bss revert PATH" command can't be set to "/".
.PP
Running filter script ".bss.fltr" drains CPU and SSD resources but it may save
SSD usage size significantly.  If you are not interested in reducing SSD usage
size by this script, remove this ".bss.fltr" file and set
BSS_TMID_ACTION="no_filter" in ".bss.conf".
.PP
For snapshotting system with APT update and reverting upon breakage, you are
encouraged to use the system mode.  The "revert" operation must be performed
from the secondary system on another root filesystem and all subvolumes to be
manipulated aren't accessed by other processes.
.PP
Since snapshot operation isn't recursive, you should mount all subvolumes
manually through "/etc/fstab" and run snapshot for each of them to keep your
system recoverable.
.SH AUTHOR
Written by Osamu Aoki.
.SH COPYRIGHT
Copyright \(co 2021\-2022 Osamu Aoki <osamu@debian.org>
.PP
License GPLv2+: GNU GPL version 2 or later <https://gnu.org/licenses/gpl\-2.0.html>.
.PP
This is free software: you are free to change and redistribute it.  There is NO
WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
See <https://github.com/osamuaoki/bss> for the latest information.
